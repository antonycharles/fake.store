// <auto-generated />
using System;
using Accounts.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Accounts.Infrastructure.Migrations
{
    [DbContext(typeof(AccountsContext))]
    [Migration("20221004225213_initialDb")]
    partial class initialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Accounts.Core.Entities.AppEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("Accounts.Core.Entities.CallBackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.ToTable("CallBacks");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAppAuthentication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ClientProfileEntity", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileId", "ClientId");

                    b.HasIndex("ClientEntityId");

                    b.HasIndex("ProfileEntityId");

                    b.ToTable("ClientsProfiles");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ProfileRoleEntity", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileId", "RoleId");

                    b.HasIndex("ProfileEntityId");

                    b.HasIndex("RoleEntityId");

                    b.ToTable("ProfilesRoles");
                });

            modelBuilder.Entity("Accounts.Core.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FatherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FatherId");

                    b.HasIndex("AppId", "Slug")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Accounts.Core.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Accounts.Core.Entities.UserProfileEntity", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileId", "UserId");

                    b.HasIndex("ProfileEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UsersProfiles");
                });

            modelBuilder.Entity("Accounts.Core.Entities.CallBackEntity", b =>
                {
                    b.HasOne("Accounts.Core.Entities.AppEntity", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("App");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ClientEntity", b =>
                {
                    b.HasOne("Accounts.Core.Entities.AppEntity", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("App");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ClientProfileEntity", b =>
                {
                    b.HasOne("Accounts.Core.Entities.ClientEntity", null)
                        .WithMany("ClientsProfiles")
                        .HasForeignKey("ClientEntityId");

                    b.HasOne("Accounts.Core.Entities.ProfileEntity", null)
                        .WithMany("ProfilesClients")
                        .HasForeignKey("ProfileEntityId");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ProfileEntity", b =>
                {
                    b.HasOne("Accounts.Core.Entities.AppEntity", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("App");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ProfileRoleEntity", b =>
                {
                    b.HasOne("Accounts.Core.Entities.ProfileEntity", null)
                        .WithMany("ProfilesRoles")
                        .HasForeignKey("ProfileEntityId");

                    b.HasOne("Accounts.Core.Entities.RoleEntity", null)
                        .WithMany("RolesProfiles")
                        .HasForeignKey("RoleEntityId");
                });

            modelBuilder.Entity("Accounts.Core.Entities.RoleEntity", b =>
                {
                    b.HasOne("Accounts.Core.Entities.AppEntity", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Accounts.Core.Entities.RoleEntity", "Father")
                        .WithMany()
                        .HasForeignKey("FatherId");

                    b.Navigation("App");

                    b.Navigation("Father");
                });

            modelBuilder.Entity("Accounts.Core.Entities.UserProfileEntity", b =>
                {
                    b.HasOne("Accounts.Core.Entities.ProfileEntity", null)
                        .WithMany("ProfilesUsers")
                        .HasForeignKey("ProfileEntityId");

                    b.HasOne("Accounts.Core.Entities.UserEntity", null)
                        .WithMany("UsersProfiles")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ClientEntity", b =>
                {
                    b.Navigation("ClientsProfiles");
                });

            modelBuilder.Entity("Accounts.Core.Entities.ProfileEntity", b =>
                {
                    b.Navigation("ProfilesClients");

                    b.Navigation("ProfilesRoles");

                    b.Navigation("ProfilesUsers");
                });

            modelBuilder.Entity("Accounts.Core.Entities.RoleEntity", b =>
                {
                    b.Navigation("RolesProfiles");
                });

            modelBuilder.Entity("Accounts.Core.Entities.UserEntity", b =>
                {
                    b.Navigation("UsersProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
